#+title: emacs literate config
#+author: lijigang

* doom built-in modules(init.el)
#+begin_src emacs-lisp :tangle "~/.doom.d/init.el" :mkdirp yes
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese

       :completion
       ;;company           ; the ultimate code completion backend
       (ivy
        +icons
        +prescient)               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       (ligatures +extra)
       ;;hydra
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup
        +all
        +defaults)   ; tame sudden yet inevitable temporary windows
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;; vc-gutter         ; vcs diff in the fringe
       ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       ;;workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget

       :tools
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       magit               ; a git porcelain for Emacs
       pdf                 ; pdf enhancements
       rgb               ; creating color strings

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS

       :lang
       emacs-lisp          ; drown in parentheses
       latex               ; writing papers in Emacs has never been so fun
       ;;markdown          ; writing docs for people to ignore

       (org                ; organize your plain life in plain text
        +roam
        +dragndrop
        +gnuplot
        +pandoc
        +pretty
        +present)

       plantuml          ; diagrams for confusing people more
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       yaml              ; JSON, but readable

       :email
       (mu4e +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       (rss +org)        ; emacs as an RSS reader

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* packages you want(packages.el)
#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el" :mkdirp yes
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

(package! dired-narrow)    ;; narrow down to what you want
(package! org-page)        ;; write blog with orgmode
(package! org-roam-server) ;; visualize your org files
(package! pangu-spacing)   ;; automatically add space after english words
(package! rime)            ;; input with rime input method
(package! valign)          ;; perfectly solve orgmode table alignment

(package! nano-emacs
  :recipe (:host github :repo "rougier/nano-emacs"))

(package! org-ql)

(package! org-super-agenda) ;; more powerful agenda

(package! org-appear
  :recipe (:host github :repo "awth13/org-appear"))

(package! org-special-block-extras)
(package! rainbow-identifiers)

(package! org-fragtog)
(package! org-tag-beautify)

(package! ace-pinyin
  :recipe (:host github :repo "cute-jumper/ace-pinyin"))

#+end_src
* Config.el
** General config
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;--------------------------------------------------
;; Change archives to emacs-china
(setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
                         ("melpa" . "http://elpa.emacs-china.org/melpa/")))

;;--------------------------------------------------

;;--------------------------------------------------
;;;;;;;;;;;;;;;;;;;;;;;;;
;; Personal Infomation ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(setq user-full-name "lijigang"
      user-mail-address "i@lijigang.com")

(setq org-directory "~/Documents/emacs/org/")

;;--------------------------------------------------

;;--------------------------------------------------
;;;;;;;;;;;;;;;;;;
;; Frame        ;;
;;;;;;;;;;;;;;;;;;

(setq frame-title-format '("你要对这个世界有点意见"))

(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 90))

(menu-bar-mode -1) ;; minimal chrome
(tool-bar-mode -1) ;; no toolbar
(scroll-bar-mode -1) ;; disable scroll bars

;;--------------------------------------------------

;;--------------------------------------------------
;;;;;;;;;;;;;
;; Windows ;;
;;;;;;;;;;;;;

(global-visual-line-mode)

(add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'visual-fill-column-mode)


(setq scroll-margin 2)

(setq-default fill-column 72)

;; 新打开窗口时, 提示要打开哪个Buffer

(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)

;; Stretch cursor to the glyph width (Tab width cursor)
(setq-default x-stretch-cursor t)

;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 0.2)

;; Underline line at descent position, not baseline position
(setq x-underline-at-descent-line t)

;; No ugly button for checkboxes
(setq widget-image-enable nil)

;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 3))
(blink-cursor-mode 0)

;; No sound
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Paren mode is part of the theme
(show-paren-mode t)

;; No fringe
(fringe-mode '(0 . 0))

;;--------------------------------------------------

;;--------------------------------------------------

;;;;;;;;;;
;; Doom ;;
;;;;;;;;;;
(setq +rss-enable-sliced-images nil)

(setq confirm-kill-emacs nil)

(setq system-time-locale "C")

;; Smooth mouse scrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))  ; scroll two lines at a time
      mouse-wheel-progressive-speed nil             ; don't accelerate scrolling
      mouse-wheel-follow-mouse t                    ; scroll window under mouse
      scroll-step 1)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(global-auto-revert-mode)

;;--------------------------------------------------

;;--------------------------------------------------
;;;;;;;;;;;;;;;;;;;;;;
;; nano-emacs theme ;;
;;;;;;;;;;;;;;;;;;;;;;

(setq doom-theme nil)

(require 'disp-table)
(require 'nano-faces)
(require 'nano-colors)
(require 'nano-theme)
(require 'nano-help)
(require 'nano-modeline)
(nano-faces)
(nano-theme)

(setq display-line-numbers-type nil
      evil-default-cursor t
      custom-blue "#718591"
      custom-yellow "#BDA441")

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-cursor-color custom-blue))))
  (set-cursor-color custom-blue))

;;--------------------------------------------------


;;--------------------------------------------------
;;;;;;;;;;
;; Font ;;
;;;;;;;;;;
(setq doom-font (font-spec :family "Roboto Mono" :size 20)
      doom-serif-font (font-spec :family "Roboto Mono" )
      doom-variable-pitch-font (font-spec :family "PingFang SC" :weight 'extra-bold)
      doom-big-font (font-spec :family "PingFang SC" :size 23))

(add-hook! 'org-mode-hook #'mixed-pitch-mode)

(setq mixed-pitch-variable-pitch-cursor nil)

;;--------------------------------------------------
#+end_src
** Package config
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(use-package! ace-pinyin
  :config
  (ace-pinyin-global-mode +1))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! org-tag-beautify
  :init (org-tag-beautify-mode 1))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! calfw
  :config
  (setq cfw:display-calendar-holidays nil))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! page-break-lines
  :commands page-break-lines-mode
  :init
  (autoload 'turn-on-page-break-lines-mode "page-break-lines")
  :config
  (setq page-break-lines-max-width fill-column)
  (map! :prefix "g"
        :desc "Prev page break" :nv "[" #'backward-page
        :desc "Next page break" :nv "]" #'forward-page))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 9090
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
;;--------------------------------------------------

;;--------------------------------------------------
(use-package org-page
  :config
  (progn
    (setq op/site-main-title "你对这个世界要有点意见")
    (setq op/personal-github-link "https://github.com/lijigang")
    (setq op/repository-directory "~/lijigang")
    (setq op/site-domain "http://lijigang.github.io/")
    (setq op/theme-root-directory (concat org-directory "private/"))
    (setq op/theme 'ljg)
    (setq op/load-directory "~/.emacs.d/.local/straight/repos/org-page/")
    (setq op/highlight-render 'js)
    (setq op/category-ignore-list '("themes" "assets" "images"))
    (setq op/category-config-alist
          '(("blog"
             :show-meta t
             :show-comment t
             :uri-generator op/generate-uri
             :uri-template "/blog/%y/%m/%d/%t/"
             :sort-by :date     ;; how to sort the posts
             :category-index nil) ;; generate category index or not
            ("index"
             :show-meta nil
             :show-comment nil
             :uri-generator op/generate-uri
             :uri-template "/"
             :sort-by :date
             :category-index nil)
            ("about"
             :show-meta nil
             :show-comment nil
             :uri-generator op/generate-uri
             :uri-template "/about/"
             :sort-by :date
             :category-index nil)))))

;;--------------------------------------------------

;;--------------------------------------------------
(use-package! dired-narrow
  :commands (dired-narrow-fuzzy)
  :init
  (map! :map dired-mode-map
        :desc "narrow" "/" #'dired-narrow-fuzzy))
;;--------------------------------------------------

;; Directly edit permisison bits!
(setq wdired-allow-to-change-permissions t)


;;--------------------------------------------------
;; Use valign package to solve table align problem
(use-package! valign
  :config
  (setq valign-fancy-bar t)
  (add-hook 'org-mode-hook #'valign-mode))
;;--------------------------------------------------

;;--------------------------------------------------
(use-package! rime
  :custom
  (default-input-method "rime")
  (rime-librime-root "~/Documents/emacs/depend/librime/dist")
  (rime-emacs-module-header-root "/usr/local/opt/emacs-mac/include")
  :config
  (define-key rime-mode-map (kbd "C-i") 'rime-force-enable)
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-current-input-punctuation-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-punctuation-line-begin-p))
  (setq rime-user-data-dir "~/Library/Rime"))
;;--------------------------------------------------


;;--------------------------------------------------
(use-package! pangu-spacing
  :config
  (global-pangu-spacing-mode 1))
;;--------------------------------------------------

;;--------------------------------------------------
(use-package! telega
  :load-path "~/Documents/emacs/depend/telega"
  :config
  (add-hook 'telega-root-mode-hook (lambda () (writeroom-mode 1)))
  (setq telega-chat-show-avatars nil)
  (setq telega-avatar-text-compose-chars nil)
  (setq telega-proxies
        (list
         '(:server "127.0.0.1" :port 8889 :enable t
           :type (:@type "proxyTypeHttp")))))
;;--------------------------------------------------



;;--------------------------------------------------
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))

(after! org-agenda
  (setq org-agenda-start-on-weekday 1)
  (org-super-agenda-mode))

(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODAY"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                           :todo "NEXT"
                           :order 1)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 2)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 7)
                          (:name "Write"
                           :tag "Write"
                           :order 10)
                          (:name "Emacs"
                           :tag "Emacs"
                           :order 13)
                          (:name "To read"
                           :tag "Read"
                           :order 30)
                          (:name "Waiting"
                           :todo "WAITING"
                           :order 20)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))))

;;--------------------------------------------------

;;--------------------------------------------------
(use-package! org-special-block-extras
  :hook (org-mode . org-special-block-extras-mode)
  :config
  ;; Use short names like ‘defblock’ instead of the fully qualified name
  ;; ‘org-special-block-extras--defblock’
  (org-special-block-extras-short-names)
  (setq org-export-allow-bind-keywords t))
;;--------------------------------------------------


;;--------------------------------------------------
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
;;--------------------------------------------------


;;--------------------------------------------------
(after! dired
  (setq dired-listing-switches "-aBhl  --group-directories-first"
        dired-dwim-target t
        dired-recursive-copies (quote always)
        dired-recursive-deletes (quote top)
        ;; Directly edit permisison bits!
        wdired-allow-to-change-permissions t
        dired-omit-mode nil))
;;--------------------------------------------------

;;--------------------------------------------------
(after! ivy
  ;; Causes open buffers and recentf to be combined in ivy-switch-buffer
  (setq ivy-use-virtual-buffers t
        +ivy-project-search-engines '(rg)
        ivy-re-builders-alist '((swiper . ivy--regex-plus) (t . ivy--regex-fuzzy))
        counsel-find-file-at-point t
        ivy-wrap nil
        ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))
        ivy-posframe-height-alist '((t . 20))
        ivy-posframe-parameters '((internal-border-width . 1))
        ivy-posframe-width 100))
;;--------------------------------------------------

;;--------------------------------------------------
(after! plantuml-mode
  (setq plantuml-jar-path (expand-file-name "~/Documents/emacs/org/private/plantuml.jar"))
  (setq plantuml-default-exec-mode 'jar))
;;--------------------------------------------------

;;--------------------------------------------------
;; (after! company
;;   (setq company-tooltip-limit 5
;;         company-tooltip-minimum-width 80
;;         company-tooltip-minimum 5
;;         company-backends
;;         '(company-capf company-dabbrev company-files company-yasnippet)
;;         company-global-modes '(not comint-mode erc-mode message-mode help-mode gud-mode)))
;;--------------------------------------------------

;;--------------------------------------------------
(after! org-roam
  :hook
  (add-hook 'org-mode-hook #'org-roam-mode)

  :config

  (setq org-roam-directory (concat org-directory "roam/")
        org-roam-db-location (concat org-directory "roam/org-roam.db")
        +org-roam-open-buffer-on-find-file nil)

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n#+options: toc:nil date:nil num:nil\n"
           :unnarrowed t))))
;;--------------------------------------------------


;;--------------------------------------------------
(solaire-global-mode +1)

(defvar +zen-serif-p t
  "Whether to use a serifed font with `mixed-pitch-mode'.")

(after! writeroom-mode
  (defvar-local +zen--original-org-indent-mode-p nil)
  (defvar-local +zen--original-mixed-pitch-mode-p nil)
  (defvar-local +zen--original-solaire-mode-p nil)
  (defvar-local +zen--original-org-pretty-table-mode-p nil)
  (defun +zen-enable-mixed-pitch-mode-h ()
    "Enable `mixed-pitch-mode' when in `+zen-mixed-pitch-modes'."
    (when (apply #'derived-mode-p +zen-mixed-pitch-modes)
      (if writeroom-mode
          (progn
            (setq +zen--original-solaire-mode-p solaire-mode)
            (solaire-mode -1)
            (setq +zen--original-mixed-pitch-mode-p mixed-pitch-mode)
            (funcall (if +zen-serif-p #'mixed-pitch-serif-mode #'mixed-pitch-mode) 1))
        (funcall #'mixed-pitch-mode (if +zen--original-mixed-pitch-mode-p 1 -1))
        (when +zen--original-solaire-mode-p (solaire-mode 1)))))
  (pushnew! writeroom--local-variables
            'display-line-numbers
            'visual-fill-column-width
            'org-adapt-indentation
            'org-superstar-headline-bullets-list
            'org-superstar-remove-leading-stars)
  (add-hook 'writeroom-mode-enable-hook
            (defun +zen-prose-org-h ()
              "Reformat the current Org buffer appearance for prose."
              (when (eq major-mode 'org-mode)
                (setq display-line-numbers nil
                      visual-fill-column-width 60
                      org-adapt-indentation nil)
                (when (featurep 'org-superstar)
                  (setq-local org-superstar-headline-bullets-list '("☰" "☷" "ൠ" "☣")
                              org-superstar-remove-leading-stars t)
                  (org-superstar-restart))
                (setq
                 +zen--original-org-indent-mode-p org-indent-mode
                 +zen--original-org-pretty-table-mode-p (bound-and-true-p org-pretty-table-mode))
                (org-indent-mode -1))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-nonprose-org-h ()
              "Reverse the effect of `+zen-prose-org'."
              (when (eq major-mode 'org-mode)
                (when (featurep 'org-superstar)
                  (org-superstar-restart))
                (when +zen--original-org-indent-mode-p (org-indent-mode 1))
                ))))

;;--------------------------------------------------
#+end_src
** LaTeX config
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2019/bin/x86_64-darwin/"))
(setq exec-path (append exec-path '("/usr/local/texlive/2019/bin/x86_64-darwin/")))

(setq org-highlight-latex-and-related '(native script entities))

(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))

(setq Tex-command-default "XeLaTeX")
(setq org-latex-pdf-process
      '(
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex auto"
        ))
;;--------------------------------------------------

;;--------------------------------------------------
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("ctexart" "\\documentclass[11pt,titlepage]{ctexart}

% Document title
\\usepackage{titling}

% Page Margins: important
% https://ctan.math.illinois.edu/macros/latex/contrib/geometry/geometry.pdf
% \\usepackage[scale=0.8,centering]{geometry}
\\usepackage{geometry}
\\geometry{
    a4paper,% 210 * 297mm
    nomarginpar,% 即\marginparwidth=0pt and \marginparsep=0pt
    hcentering,% 将hmarginratio设为1:1，即left=right
    left=28mm,% 注意left=right
    top=37.00mm,% Word 模板页眉顶端距离20mm
    width=156mm,
    height=225mm,
    }

% Page head and foot
% lhead/chead/rhead
% lfoot/cfoot/rfoot
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\rfoot{\\title}
\\renewcommand\\headrulewidth{0.6pt}
\\renewcommand\\footrulewidth{0.6pt}


% Format of section and subsection headers
% [rm sf tt bf up it sl sc]
% Select the corresponding family/series/shape. Default is bf.
\\usepackage{titlesec}

% 使用UTF-8编码输入文字
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}

% Hyperlinks and bookmarks
\\usepackage{hyperref}
\\hypersetup{colorlinks=true,linkcolor=blue}

% xcolor is more powerful than color
% \\color{red!70}  %70 percent red color
% \\textcolor{red}
% \\colorbox{gray}
\\usepackage[rgb]{xcolor}

% Include graphics
\\usepackage{graphicx}

\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}

% For org-special-block-extras package
\\usepackage{tcolorbox}
\\usepackage{multicol}

% List items
\\usepackage{enumerate}
%% \\usepackage{enumitem}

% Line spread
\\usepackage{parskip}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-default-class "ctexart")
  (setq org-latex-compiler "xelatex"))

;;--------------------------------------------------
#+end_src
** Keybindings
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(setq doom-localleader-key ",")

(map!
 ;; 众妙之门, 值得分配一个 SPC SPC
 :leader :desc "All in M-x" "SPC" #'counsel-M-x

 "C-h h" 'helpful-at-point
 "C-h f" 'helpful-function
 "C-h v" 'helpful-variable
 "C-h k" 'helpful-key)

(map! :leader
      :desc "open export dispatch" "e" #'org-export-dispatch)

(map! :leader
      (:prefix "o" :desc "open applications"
       "e" #'elfeed
       "t" #'telega))

(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)

(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)


(map! :leader
      :prefix ("r" . "org-roam")
      "f" #'org-roam-find-file
      "s" #'org-roam-server-mode
      "i" #'org-roam-insert
      "t" #'org-roam-dailies-find-today)
;;--------------------------------------------------
#+end_src
** Orgmode config
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(after! org
  (setq org-archive-location (concat org-directory "roam/archive.org::")
        org-log-done t
        org-use-property-inheritance t
        org-confirm-babel-evaluate nil
        org-list-allow-alphabetical t
        org-export-with-sub-superscripts nil
        org-export-use-babel nil
        org-use-speed-commands t
        org-return-follows-link t
        org-hide-emphasis-markers t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-export-in-background nil
        org-catch-invisible-edits 'smart)

  (setq org-todo-keywords
        '((sequence "TODO" "WORK" "DELAYED" "|" "DONE")))

  (set-face-attribute 'org-headline-done nil :strike-through t)

  ;; (remove-hook 'text-mode-hook #'visual-line-mode)
  ;; (add-hook 'text-mode-hook #'auto-fill-mode)

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (add-hook 'org-babel-after-execute-hook 'org-toggle-latex-fragment 'append)

  (setq org-html-head
        "<link rel='stylesheet' type='text/css' href='https://www.labri.fr/perso/nrougier/GTD/GTD.css'/>")

  (setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))

  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (plantuml . t)
     (gnuplot . t)))

  (setq org-export-headline-levels 5)

  (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)

  (custom-set-faces!
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold))

  (custom-set-faces!
    '(org-document-title :height 1.2))

  (setq org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t)

  (after! org-superstar
    (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
          org-superstar-prettify-item-bullets t ))

  (setq org-ellipsis " ▾ "
        org-hide-leading-stars t
        org-priority-highest ?A
        org-priority-lowest ?E
        org-priority-faces
        '((?A . 'all-the-icons-red)
          (?B . 'all-the-icons-orange)
          (?C . 'all-the-icons-yellow)
          (?D . 'all-the-icons-green)
          (?E . 'all-the-icons-blue)))

  (appendq! +ligatures-extra-symbols
            `(:checkbox      "☐"
              :pending       "◼"
              :checkedbox    "☑"
              :list_property "∷"
              :em_dash       "—"
              :ellipses      "…"
              :arrow_right   "→"
              :arrow_left    "←"
              :title         "𝙏"
              :subtitle      "𝙩"
              :author        "𝘼"
              :date          "𝘿"
              :property      "☸"
              :options       "⌥"
              :latex_class   "🄲"
              :latex_header  "⇥"
              :beamer_header "↠"
              :attr_latex    "🄛"
              :attr_html     "🄗"
              :begin_quote   "❮"
              :end_quote     "❯"
              :caption       "☰"
              :header        "›"
              :results       "🍌"
              :begin_export  "⏩"
              :end_export    "⏪"
              :properties    "⚙"
              :end           "∎"
              :priority_a   ,(propertize "🅰" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "🅱" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "🅲" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "🅳" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "🅴" 'face 'all-the-icons-blue)))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :property      "#+property:"
    :options       "#+options:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_latex:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]")
  (plist-put +ligatures-extra-symbols :name "⁍")
  )

;;--------------------------------------------------
#+end_src
** org-agenda config
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes
(after! org

  (setq org-agenda-files (directory-files-recursively (concat org-directory "roam") "\\.org$"))

  (setq org-agenda-diary-file (concat org-directory "private/standard-diary"))

  (setq diary-file (concat org-directory "private/standard-diary"))

  (setq org-agenda-deadline-faces
        '((1.001 . error)
          (1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . org-upcoming-distant-deadline)))

  (setq org-agenda-prefix-format '((agenda . "%t %s ")
                                   (todo   . " ")))

  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))


  (setq org-agenda-start-on-weekday nil
        org-agenda-log-mode-items '(clock)
        org-agenda-include-all-todo t
        org-agenda-time-leading-zero t
        org-agenda-use-time-grid nil
        calendar-holidays nil
        org-agenda-include-diary t)

  )
#+end_src
** elfeed

#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(after! elfeed
  (use-package! elfeed-link)

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        rmh-elfeed-org-files (list (concat org-directory "roam/elfeed.org"))
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (setq-local line-spacing 0.2)))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))

  )
;;--------------------------------------------------
#+end_src
** Personal functions
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el" :mkdirp yes

;;--------------------------------------------------
(defun dcf (cf0 g r n)
  "calculate dcf value

CF0为初始净利润， g为预计净利润年复合增长率

r 为未来现金流折现率， n为企业未来存活年数"
  (interactive "nCF0: \nng: \nnr: \nnn: ")
  (let* ((g1 (expt (1+ g) n))
         (r1  (expt (1+ r) (- n)))
         (cf1 (* cf0 g1 r1)))
    (/ (- cf0 cf1) (- r g))))

;;--------------------------------------------------

;;--------------------------------------------------
;; 插入今年的时间进度条
(defun make-progress (width percent has-number?)
  (let* ((done (/ percent 100.0))
         (done-width (floor (* width done))))
    (concat
     "["
     (make-string done-width ?/)
     (make-string (- width done-width) ? )
     "]"
     (if has-number? (concat " " (number-to-string percent) "%")))))
;;--------------------------------------------------

;;--------------------------------------------------
(defun insert-day-progress ()
  (interactive)
  (let* ((today (time-to-day-in-year (current-time)))
         (percent (floor (* 100 (/ today 365.0)))))
    (insert (make-progress 30 percent t))
    ))

;; SPC i p to insert day progress
(map! :leader :desc "Insert day progress" "i p" #'insert-day-progress)
;;--------------------------------------------------


;;--------------------------------------------------
(defun org-insert-image ()
  "insert a image from clipboard"
  (interactive)
  (let* ((path (concat default-directory "images/"))
         (fname (read-string "Enter file name: "))
         (image-file (concat path fname)))
    (if (not (file-exists-p path))
        (mkdir path))
    (do-applescript (concat
                     "set the_path to \"" image-file "\" \n"
                     "set png_data to the clipboard as «class PNGf» \n"
                     "set the_file to open for access (POSIX file the_path as string) with write permission \n"
                     "write png_data to the_file \n"
                     "close access the_file"))
    ;; (shell-command (concat "pngpaste " image-file))
    (org-insert-link nil
                     (concat "file:" image-file)
                     "")
    (message image-file))
  (org-display-inline-images)
  )

(map! :leader :desc "Insert image" "i i" #'org-insert-image)

;;--------------------------------------------------
#+end_src
