* 背景
#+begin_quote
配置原则： *如无必要, 勿增实体*
#+end_quote

配置的每行代码争取做到 =减无可减= 的状态, 增加的每一行都有其原因。

* 截图
#+attr_org: :width 600px
[[file:images/demo1.png]]

#+attr_org: :width 600px
[[file:images/demo2.png]]

* 安装
1. 安装 Doom
   #+begin_src shell
   git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d

   ~/.emacs.d/bin/doom install
   #+end_src
2. 下载本配置文件到本地
   #+begin_src shell
    git clone git@github.com:lijigang/emacs.d.git
   #+end_src
3. Tangle 代码生成配置
  #+begin_src
   ;; emacs readme.org
   M-x: org-babel-tangle
  #+end_src
4. 修改敏感变量
   #+begin_example
    搜索 FIXME, 将该标记下方的变量值更改为你自己所需。
   #+end_example

* 配置
** 开关: Doom 自带的模块
:PROPERTIES:
:header-args: :tangle "~/.doom.d/init.el"
:header-args: :mkdirp yes
:END:

#+begin_src emacs-lisp :tangle "~/.doom.d/init.el"
;;; init.el -*- lexical-binding: t; -*-

(doom!
       :completion
       (ivy
        +icons
        +prescient)       ; a search engine for love and life

       :ui
       doom               ; what makes DOOM look the way it does
       hl-todo            ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       (ligatures +extra)
       ophints            ; highlight the region an operation acts on
       (popup
        +all
        +defaults)        ; tame sudden yet inevitable temporary windows
       zen                ; distraction-free coding or writing

       :editor
       (evil +everywhere) ; come to the dark side, we have cookies
       file-templates     ; auto-snippets for empty files
       fold               ; (nigh) universal code folding
       (format +onsave)   ; automated prettiness
       snippets           ; my elves. They type so I don't have to

       :emacs
       (dired +icons)     ; making dired pretty [functional]
       electric           ; smarter, keyword-based electric-indent
       (ibuffer +icons)   ; interactive buffer management
       undo               ; persistent, smarter undo for your inevitable mistakes

       :checkers
       syntax             ; tasing you for every semicolon you forget

       :tools
       (eval +overlay)    ; run code, run (also, repls)
       lookup             ; navigate your code and its documentation
       magit              ; a git porcelain for Emacs
       pdf                ; pdf enhancements
       rgb                ; creating color strings

       :os
       (:if IS-MAC macos) ; improve compatibility with macOS

       :lang
       emacs-lisp         ; drown in parentheses
       latex              ; writing papers in Emacs has never been so fun

       (org               ; organize your plain life in plain text
        +roam
        +dragndrop
        +gnuplot
        +hugo
        +pandoc
        +pretty
        +present)

       plantuml           ; diagrams for confusing people more
       sh                 ; she sells {ba,z,fi}sh shells on the C xor
       yaml               ; JSON, but readable

       :email
       (mu4e +org)

       :app
       calendar
       (rss +org)         ; emacs as an RSS reader

       :config
       (default +bindings +smartparens))
#+end_src

** 加装: 额外需要的功能包
:PROPERTIES:
:header-args: :tangle "~/.doom.d/packages.el"
:header-args: :mkdirp yes
:END:

#+begin_src emacs-lisp :tangle "~/.doom.d/packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el


;; 快速跳转到任意位置, 通过汉字拼音的方式
(package! ace-pinyin
  :recipe (:host github :repo "cute-jumper/ace-pinyin"))




;; 默认的dired 展现内容太多了, 通过此包可过滤展示需要的内容
(package! dired-narrow)



(package! elfeed-org)



;; 好用的翻译包
(package! fanyi)



;; 简洁好看的主题
(package! nano-theme)
(package! nano-modeline)




;; 鼠标放到加粗字符上, 可编辑修饰符, 离开即显示加粗后的效果
(package! org-appear
  :recipe (:host github :repo "awth13/org-appear"))




;; 鼠标放到LaTeX 代码上, 可编辑状态, 离开即显示编译后的公式效果
(package! org-fragtog)




;; 通过orgmode 写博客, 使用此包即可
;; (package! org-page)




;; 一个快速查询org 文件相关内容的 query language
(package! org-ql)




;; 在浏览器中直观查看org-roam 文件之间的关联图
;; (package! org-roam-server)





;; 增加了一些特殊的block, 导出的PDF 更好看
;; (package! org-special-block-extras)




;; 中英文字符之间自动插入空格, 增加可阅读性
(package! pangu-spacing)




;; 每个标识符显示一个颜色, 花里胡哨的开始
(package! rainbow-identifiers)




;; 在Emacs 中使用rime, 减少切换中英文状态
(package! rime)




;; 完美解决中英文字符在表格中对齐的问题
(package! valign)

#+end_src
** 配置: 你想要的效果
:PROPERTIES:
:header-args: :tangle "~/.doom.d/config.el"
:header-args: :mkdirp yes
:END:

*** 通用配置
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-


;; 通过Emacs-china 的仓库来安装包, 提升安装速度
;; FIXME
(setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
                         ("melpa" . "http://elpa.emacs-china.org/melpa/")))




;; 个人信息
;; FIXME
(setq user-full-name "lijigang"
      user-mail-address "i@lijigang.com")




;; 通过iCloud 自动同步Documents 目录, 多台电脑可以无缝迁移使用
;; FIXME
(setq org-directory "~/Documents/emacs/org/")




;; 关闭emacs 时无需额外确认
(setq confirm-kill-emacs nil)

;; 设置系统时间显示方式
(setq system-time-locale "C")

;; 打开文件时, 光标自动定位到上次停留的位置
(save-place-mode 1)

;; no pop-up window
(setq pop-up-windows nil)




(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)




;; 全局打开visual line
;; (global-visual-line-mode)

(add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode)
;; (add-hook 'org-mode-hook 'visual-line-mode)
;; (add-hook 'org-mode-hook 'visual-fill-column-mode)

;; 查帮助文档时, 显示使用Demos
(advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)




;; 关闭Doom rss 切割图片的功能, 展示完整图片吧
(setq +rss-enable-sliced-images nil)



;; 编辑了Buffer , 又想回退到file 原始内容, 需要这个mode
(global-auto-revert-mode)

#+end_src
*** 配置 Frame
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; 锁定窗口标题内容
(setq frame-title-format '("你要对这个世界有点意见"))




;; 指定新打开的Emacs 窗口的长宽大小
(setq default-frame-alist
      (append (list '(vertical-scroll-bars . nil)
                    '(internal-border-width . 18)
                    '(width  . 130) '(height . 0.9)
                    '(left . 0.3) '(top . 0))))

(menu-bar-mode -1) ;; minimal chrome
(tool-bar-mode -1) ;; no toolbar
(scroll-bar-mode -1) ;; disable scroll bars

#+end_src
*** 配置 Window
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; 窗口滚动时, 光标所在行不要顶到边缘, 留两行的Buffer
(setq scroll-margin 2)





;; 新打开窗口时, 提示要打开哪个Buffer
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)




;; Stretch cursor to the glyph width (Tab width cursor)
(setq-default x-stretch-cursor t)

;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 0.2)

(setq-default fill-column 72)

;; Underline line at descent position, not baseline position
(setq x-underline-at-descent-line t)

;; No ugly button for checkboxes
(setq widget-image-enable nil)

;; Line cursor and no blink
(set-default 'cursor-type  '(bar . 3))
(blink-cursor-mode 0)

;; No sound
(setq visible-bell t)
(setq ring-bell-function 'ignore)

;; Paren mode is part of the theme
(show-paren-mode t)

;; No fringe
(fringe-mode '(0 . 0))

#+end_src
*** 配置鼠标滚动
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; Smooth mouse scrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))  ; scroll two lines at a time
      mouse-wheel-progressive-speed nil             ; don't accelerate scrolling
      mouse-wheel-follow-mouse t                    ; scroll window under mouse
      scroll-step 1)

#+end_src
*** 配置主题
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; 关掉Doom 自己的Theme
(setq doom-theme nil)

;; 使用 nano-theme
(require 'nano-theme)
(nano-mode)
(nano-light)

(nano-modeline-mode)

(setq display-line-numbers-type nil
      evil-default-cursor t
      custom-blue "#718591"
      custom-yellow "#BDA441")

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-cursor-color custom-blue))))
  (set-cursor-color custom-blue))


#+end_src
*** 配置字体
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; Doom 自带的字体变量配置

;; Plan A: 中文苹方, 英文Roboto Mono
(setq doom-font (font-spec :family "Roboto Mono" :size 20)
      doom-serif-font (font-spec :family "Roboto Mono" )
      doom-variable-pitch-font (font-spec :family "PingFang SC" :weight 'extra-bold)
      doom-unicode-font (font-spec :family "PingFang SC")
      doom-big-font (font-spec :family "PingFang SC" :size 23))

;; Plan B: 中文隶变, 英文Comic
;; 中文隶变下载地址:
;; https://www.foundertype.com/index.php/FindFont/searchFont?keyword=隶变
;; (setq doom-font (font-spec :family "Comic Sans MS" :size 20)
;;       doom-serif-font (font-spec :family "Comic Sans MS" )
;;       doom-variable-pitch-font (font-spec :family "FZLiBian-S02" :weight 'extra-bold)
;;       doom-unicode-font (font-spec :family "FZLiBian-S02")
;;       doom-big-font (font-spec :family "FZLiBian-S02" :size 23))

#+end_src
*** 配置 LaTeX
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; FIXME
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2019/bin/x86_64-darwin/"))
(setq exec-path (append exec-path '("/usr/local/texlive/2019/bin/x86_64-darwin/")))

(setq org-highlight-latex-and-related '(native script entities))

;; (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))

(pdf-loader-install)

(setq Tex-command-default "XeLaTeX")
(setq org-latex-pdf-process
      '(
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "rm -fr %b.out %b.log %b.tex auto"))

#+end_src

#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("ctexart" "\\documentclass[11pt,titlepage]{ctexart}

% Document title
\\usepackage{titling}

% Page Margins: important
% https://ctan.math.illinois.edu/macros/latex/contrib/geometry/geometry.pdf
% \\usepackage[scale=0.8,centering]{geometry}
\\usepackage{geometry}
\\geometry{
    a4paper,% 210 * 297mm
    nomarginpar,% 即\marginparwidth=0pt and \marginparsep=0pt
    hcentering,% 将hmarginratio设为1:1，即left=right
    left=28mm,% 注意left=right
    top=37.00mm,% Word 模板页眉顶端距离20mm
    width=156mm,
    height=225mm,
    }

% Page head and foot
% lhead/chead/rhead
% lfoot/cfoot/rfoot
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\rfoot{\\title}
\\renewcommand\\headrulewidth{0.6pt}
\\renewcommand\\footrulewidth{0.6pt}


% Format of section and subsection headers
% [rm sf tt bf up it sl sc]
% Select the corresponding family/series/shape. Default is bf.
\\usepackage{titlesec}

% for use notin math symbol
\\usepackage{unicode-math}

% 使用UTF-8编码输入文字
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}

% Hyperlinks and bookmarks
\\usepackage{hyperref}
\\hypersetup{colorlinks=true,linkcolor=blue}

% xcolor is more powerful than color
% \\color{red!70}  %70 percent red color
% \\textcolor{red}
% \\colorbox{gray}
\\usepackage[rgb]{xcolor}

% Include graphics
\\usepackage{graphicx}

\\usepackage{longtable}
\\usepackage{float}
\\usepackage{wrapfig}

% List items
\\usepackage{enumerate}
%% \\usepackage{enumitem}

% Line spread
\\usepackage{parskip}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-default-class "ctexart")
  (setq org-latex-compiler "xelatex"))

#+end_src
*** 配置 =OrgMode=
**** 常用变量
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org
  (setq org-archive-location (concat org-directory "roam/archive.org::")
        org-log-done t
        org-use-property-inheritance t
        org-confirm-babel-evaluate nil
        org-list-allow-alphabetical t
        org-export-with-sub-superscripts nil
        org-export-headline-levels 5
        org-export-use-babel t
        org-use-speed-commands t
        org-return-follows-link t
        org-hide-emphasis-markers t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-export-in-background nil
        org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-catch-invisible-edits 'smart)

  (setq org-ellipsis " ▾ "
        org-hide-leading-stars t
        org-priority-highest ?A
        org-priority-lowest ?E
        org-priority-faces
        '((?A . 'all-the-icons-red)
          (?B . 'all-the-icons-orange)
          (?C . 'all-the-icons-yellow)
          (?D . 'all-the-icons-green)
          (?E . 'all-the-icons-blue)))

  (setq org-todo-keywords
        '((sequence "TODO" "WORK" "|" "DONE")))

  (setq org-list-demote-modify-bullet
        '(("+" . "-") ("-" . "+") ("*" . "+") ("1." . "a.")))

  (setq org-tag-alist '(("@工作" . ?w) ("@生活" . ?l) ("@学习" . ?s)))

  ;; Coding system for HTML export.
  (setq org-html-coding-system 'utf-8)
  (setq org-html-doctype "html5")
  (setq org-html-head
        "<link rel='stylesheet' type='text/css' href='https://gongzhitaao.org/orgcss/org.css'/> ")

  ;; (setq org-html-head
  ;;       "<link rel='stylesheet' type='text/css' href='https://www.labri.fr/perso/nrougier/GTD/GTD.css'/>")

  (after! org-superstar
    ;; other symbols like: 🦄 🧙 🐻
    (setq org-superstar-headline-bullets-list '("▶" "✿" "🐶" "◉")
          org-superstar-prettify-item-bullets t ))

    ;; Learn from:
  ;; https://mullikine.github.io/posts/org-mode-bold/
  (defface org-bold
    '((t :foreground "#d2268b"
         :background "#fefefe"
         :weight bold
         :underline t
         :overline t))
    "Face for org-mode bold."
    :group 'org-faces )

  (setq org-emphasis-alist
        '(("*" org-bold)
          ("/" italic)
          ("_" underline)
          ("=" ;; (:background "maroon" :foreground "white")
           org-verbatim verbatim)
          ("~" ;; (:background "deep sky blue" :foreground "MidnightBlue")
           org-code verbatim)
          ("+" (:strike-through t))))

  ;; Because spacemacs had different ideas about the verbatim background
  (set-face-background 'org-bold "#fefefe")
  (set-face-background 'org-verbatim "#fefefe")

  ;; 完成任务时, 将其划线勾掉
  (set-face-attribute 'org-headline-done nil :strike-through t)

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (add-hook 'org-babel-after-execute-hook 'org-toggle-latex-fragment 'append)
  (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)

  )
 
#+end_src
**** org agenda
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org
  ;; FIXME
  (setq org-agenda-files (directory-files-recursively (concat org-directory "roam") "\\.org$"))
  (setq org-agenda-diary-file (concat org-directory "private/standard-diary"))
  (setq diary-file (concat org-directory "private/standard-diary"))

  (setq org-agenda-deadline-faces
        '((1.001 . error)
          (1.0 . org-warning)
          (0.5 . org-upcoming-deadline)
          (0.0 . org-upcoming-distant-deadline)))

  (setq org-agenda-prefix-format '((agenda . "%t %s ")
                                   (todo   . " ")))

  (setq org-agenda-clockreport-parameter-plist
        '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))

  (setq org-agenda-hide-tags-regexp ".")

  (setq org-agenda-span 7
        org-agenda-start-on-weekday 1
        org-agenda-log-mode-items '(clock)
        org-agenda-include-all-todo t
        org-agenda-time-leading-zero t
        org-agenda-use-time-grid nil
        calendar-holidays nil
        org-agenda-include-diary t))

#+end_src
**** org babel languages
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (plantuml . t)
     (gnuplot . t))))

#+end_src
**** 美化符号
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org
    (appendq! +ligatures-extra-symbols
            `(:checkbox      "☐"
              :pending       "◼"
              :checkedbox    "☑"
              :list_property "∷"

              :ellipses      "…"
              :arrow_right   "→"
              :arrow_left    "←"
              :title         "❤"
              :subtitle      "𝙩"
              :author        "✍"
              :date          "⚓"
              :property      "☸"
              :options       "⌥"
              :latex_class   "🄲"
              :latex_header  "⇥"
              :beamer_header "↠"
              :attr_latex    "🄛"
              :attr_html     "🄗"
              :begin_quote   "❮"
              :end_quote     "❯"
              :caption       "☰"
              :header        "›"
              :results       "🍌"
              :begin_export  "⏩"
              :end_export    "⏪"
              :properties    "⚙"
              :end           "∎"
              :priority_a   ,(propertize "🅰" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "🅱" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "🅲" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "🅳" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "🅴" 'face 'all-the-icons-blue)))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :property      "#+property:"
    :options       "#+options:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_latex:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]")
  (plist-put +ligatures-extra-symbols :name "⁍")
)


#+end_src
**** custom face
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org
  (custom-set-faces!
    '(outline-1 :weight extra-bold :height 1.25)
    '(outline-2 :weight bold :height 1.15)
    '(outline-3 :weight bold :height 1.12)
    '(outline-4 :weight semi-bold :height 1.09)
    '(outline-5 :weight semi-bold :height 1.06)
    '(outline-6 :weight semi-bold :height 1.03)
    '(outline-8 :weight semi-bold)
    '(outline-9 :weight semi-bold))

  (custom-set-faces!
    '(org-document-title :height 1.2)))

#+end_src
*** 配置自带包
**** dired
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! dired
  (setq dired-listing-switches "-aBhl  --group-directories-first"
        dired-dwim-target t
        dired-recursive-copies (quote always)
        dired-recursive-deletes (quote top)
        ;; Directly edit permisison bits!
        wdired-allow-to-change-permissions t
        dired-omit-mode nil))

#+end_src
**** evil
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil))

#+end_src
**** ivy
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! ivy
  ;; Causes open buffers and recentf to be combined in ivy-switch-buffer
  (setq ivy-use-virtual-buffers t
        +ivy-project-search-engines '(rg)
        ivy-re-builders-alist '((swiper . ivy--regex-plus) (t . ivy--regex-fuzzy))
        counsel-find-file-at-point t
        ivy-wrap nil
        ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center))
        ivy-posframe-height-alist '((t . 20))
        ivy-posframe-parameters '((internal-border-width . 1))
        ivy-posframe-width 100))

#+end_src
**** org-roam
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! org-roam
  :hook
  (add-hook 'org-mode-hook #'org-roam-mode)

  :config

  (setq org-roam-directory (concat org-directory "roam/")
        org-roam-db-location (concat org-directory "roam/org-roam.db")
        +org-roam-open-buffer-on-find-file nil)

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n#+options: toc:nil date:nil num:nil\n"
           :unnarrowed t))))

#+end_src
**** plantuml
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(after! plantuml-mode
  (setq plantuml-jar-path (expand-file-name "~/Documents/emacs/org/private/plantuml.jar"))
  (setq plantuml-default-exec-mode 'jar))

#+end_src
**** writroom
*** 配置加装包
**** ace-pinyin
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! ace-pinyin
  :config
  (ace-pinyin-global-mode +1))

#+end_src
**** dired-narrow
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! dired-narrow
  :commands (dired-narrow-fuzzy)
  :init
  (map! :map dired-mode-map
        :desc "narrow" "C-/" #'dired-narrow-fuzzy))

;; Directly edit permisison bits!
(setq wdired-allow-to-change-permissions t)

#+end_src

**** elfeed-org
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! elfeed-org
  :config
  (setq rmh-elfeed-org-files (list "~/Documents/emacs/org/roam/elfeed.org")))

#+end_src

**** org-appear
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"
;; 
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil))
;; 
#+end_src
**** org-fragtog
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))

#+end_src
**** org-page
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; (use-package org-page
;;   :config
;;   (progn
;;     ;; FIXME
;;     (setq op/site-main-title "你对这个世界要有点意见")
;;     (setq op/personal-github-link "https://github.com/lijigang")
;;     (setq op/repository-directory "~/lijigang")
;;     (setq op/site-domain "http://lijigang.github.io/")
;;     (setq op/theme-root-directory (concat org-directory "private/"))
;;     (setq op/theme 'ljg)
;;     (setq op/load-directory "~/.emacs.d/.local/straight/repos/org-page/")
;;     (setq op/highlight-render 'js)
;;     (setq op/category-ignore-list '("themes" "assets" "images"))
;;     (setq op/category-config-alist
;;           '(("blog"
;;              :show-meta t
;;              :show-comment t
;;              :uri-generator op/generate-uri
;;              :uri-template "/blog/%y/%m/%d/%t/"
;;              :sort-by :date     ;; how to sort the posts
;;              :category-index nil) ;; generate category index or not
;;             ("index"
;;              :show-meta nil
;;              :show-comment nil
;;              :uri-generator op/generate-uri
;;              :uri-template "/"
;;              :sort-by :date
;;              :category-index nil)
;;             ("about"
;;              :show-meta nil
;;              :show-comment nil
;;              :uri-generator op/generate-uri
;;              :uri-template "/about/"
;;              :sort-by :date
;;              :category-index nil)))))


#+end_src
**** org-roam-server
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; (use-package! org-roam-server
;;   :config
;;   (setq org-roam-server-host "127.0.0.1"
;;         org-roam-server-port 9090
;;         org-roam-server-export-inline-images t
;;         org-roam-server-authenticate nil
;;         org-roam-server-network-label-truncate t
;;         org-roam-server-network-label-truncate-length 60
;;         org-roam-server-network-label-wrap-length 20))

#+end_src
**** pangu-spacing
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! pangu-spacing
  :config
  (global-pangu-spacing-mode 1)
  ;; 在中英文符号之间, 真正地插入空格
  (setq pangu-spacing-real-insert-separtor t))

#+end_src
**** rime
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! rime
  :custom
  (default-input-method "rime")
  ;; FIXME
  (rime-librime-root "~/Documents/emacs/depend/librime/dist")
  (rime-emacs-module-header-root "/opt/homebrew/Cellar/emacs-mac/emacs-28.1-mac-9.0/include")
  ;; (rime-emacs-module-header-root "/usr/local/opt/emacs-mac/include")
  :config
  (define-key rime-mode-map (kbd "C-i") 'rime-force-enable)
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-current-input-punctuation-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-punctuation-line-begin-p))
  ;; FIXME
  (setq rime-user-data-dir "~/Library/Rime"))

#+end_src
**** telega
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! telega
  ;; FIXME
  :load-path "~/Documents/emacs/depend/telega"
  :config
  ;; (add-hook 'telega-root-mode-hook (lambda () (writeroom-mode 1)))
  ;; (add-hook 'telega-chat-mode-hook (lambda () (writeroom-mode 1)))
  (setq telega-chat-show-avatars nil)
  (setq telega-avatar-text-compose-chars nil)
  (setq telega-chat-input-prompt "🐶:> ")
  (setq telega-proxies
        (list
         '(:server "127.0.0.1" :port 8889 :enable t
           :type (:@type "proxyTypeHttp")))))

(with-eval-after-load 'telega
  (define-key telega-msg-button-map "k" nil))


#+end_src
**** valign
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(use-package! valign
  :config
  (setq valign-fancy-bar t)
  (add-hook 'org-mode-hook #'valign-mode))


#+end_src
*** 配置自定义函数
**** 价值投资 DCF 函数
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(defun dcf (cf0 g r n)
  "calculate dcf value

CF0为初始净利润， g为预计净利润年复合增长率

r 为未来现金流折现率， n为企业未来存活年数"
  (interactive "nCF0: \nng: \nnr: \nnn: ")
  (let* ((g1 (expt (1+ g) n))
         (r1  (expt (1+ r) (- n)))
         (cf1 (* cf0 g1 r1)))
    (/ (- cf0 cf1) (- r g))))

#+end_src
**** 今年的时间进度函数
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; 插入今年的时间进度条
(defun make-progress (width percent has-number?)
  (let* ((done (/ percent 100.0))
         (done-width (floor (* width done))))
    (concat
     "["
     (make-string done-width ?/)
     (make-string (- width done-width) ? )
     "]"
     (if has-number? (concat " " (number-to-string percent) "%")))))



(defun insert-day-progress ()
  (interactive)
  (let* ((today (time-to-day-in-year (current-time)))
         (percent (floor (* 100 (/ today 365.0)))))
    (insert (make-progress 30 percent t))
    ))

;; SPC i p to insert day progress
(map! :leader :desc "Insert day progress" "i p" #'insert-day-progress)

#+end_src
**** 快速插入截图到文件
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(defun org-insert-image ()
  "insert a image from clipboard"
  (interactive)
  (let* ((path (concat default-directory "images/"))
         (fname (read-string "Enter file name: "))
         (image-file (concat path fname)))
    (if (not (file-exists-p path))
        (mkdir path))
    (do-applescript (concat
                     "set the_path to \"" image-file "\" \n"
                     "set png_data to the clipboard as «class PNGf» \n"
                     "set the_file to open for access (POSIX file the_path as string) with write permission \n"
                     "write png_data to the_file \n"
                     "close access the_file"))
    ;; (shell-command (concat "pngpaste " image-file))
    (org-insert-link nil
                     (concat "file:" image-file)
                     "")
    (message image-file))
  (org-display-inline-images)
  )

(map! :leader :desc "Insert image" "i i" #'org-insert-image)

#+end_src
**** 将 form feed 符号显示为横线
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(defun xah-show-formfeed-as-line ()
  "Display the formfeed ^L char as line. Version 2018-08-30"
  (interactive)
  ;; 2016-10-11 thanks to Steve Purcell's page-break-lines.el
  (progn
    (when (not buffer-display-table)
      (setq buffer-display-table (make-display-table)))
    (aset buffer-display-table ?\^L
          (vconcat (make-list 39 (make-glyph-code ?─ 'font-lock-comment-face))))
    (redraw-frame)))


(add-hook 'org-mode-hook #'xah-show-formfeed-as-line)
(add-hook 'emacs-lisp-mode-hook #'xah-show-formfeed-as-line)

#+end_src
**** 更方便的插入链接
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

;; Learn from: https://xenodium.com/emacs-dwim-do-what-i-mean/
(defun ar/org-insert-link-dwim ()
  "Like `org-insert-link' but with personal dwim preferences."
  (interactive)
  (let* ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (when (string-match-p "^http" (current-kill 0))
                          (current-kill 0)))
         (region-content (when (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (cond ((and region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((and clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string "title: "
                                 (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))

(map! :leader "i l" #'ar/org-insert-link-dwim)


#+end_src
*** 配置快捷键
**** 通用快捷键
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(setq doom-localleader-key ",")

(map!
 ;; 众妙之门, 值得分配一个 SPC SPC
 :leader :desc "All in M-x" "SPC" #'counsel-M-x

 "C-h h" 'helpful-at-point
 "C-h f" 'helpful-function
 "C-h v" 'helpful-variable
 "C-h k" 'helpful-key)


(map! :leader
      :desc "open export dispatch" "e" #'org-export-dispatch)

(map! :leader
      (:prefix "o" :desc "open applications"
       "e" #'elfeed
       "t" #'telega))

#+end_src
**** org-roam 快捷键
#+begin_src emacs-lisp :tangle "~/.doom.d/config.el"

(map! :leader
      :prefix ("r" . "org-roam")
      "f" #'org-roam-find-file
      ;; "s" #'org-roam-server-mode
      "i" #'org-roam-insert
      "t" #'org-roam-dailies-find-today)

#+end_src
